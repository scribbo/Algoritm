import cProfile
from math import sqrt


def task_1_1(num):
    num_rev = ''
    for i in range(len(num)):
        num_rev += num[len(num) - i - 1]

    print(num_rev)

# O(n)

def task_1_2(num):
    num_rev = num[::-1]

    print(num_rev)

# O(n)

num = input('Введите длинное число: ')
cProfile.run('task_1_1(num), task_1_2(num)')

# Введите длинное число
# 222222222222222299999999999999999999999999998888888888888888887777777777777777777777777766666666666666666655555555555555555555554444444444444444444444444444222222222222222299999999999999999999999999998888888888888888887777777777777777777777777766666666666666666655555555555555555555554444444444444444444444444444222222222222222299999999999999999999999999998888888888888888887777777777777777777777777766666666666666666655555555555555555555554444444444444444444444444444222222222222222299999999999999999999999999998888888888888888887777777777777777777777777766666666666666666655555555555555555555554444444444444444444444444444222222222222222299999999999999999999999999998888888888888888887777777777777777777777777766666666666666666655555555555555555555554444444444444444444444444444222222222222222299999999999999999999999999998888888888888888887777777777777777777777777766666666666666666655555555555555555555554444444444444444444444444444

#          944 function calls in 0.001 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.000    0.000    0.001    0.001 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 lesson_4.py:13(task_1_2)
#         1    0.001    0.001    0.001    0.001 lesson_4.py:5(task_1_1)
#         1    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
#       937    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#         2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

def task_2_1(seq_num):

    n = seq_num * 10

    a = [0] * n
    for i in range(n):
        a[i] = i

    a[1] = 0

    m = 2
    while m < n:       # 10 * seq_num
        if a[m] != 0:
            j = m * 2
            while j < n:  # ~log(10 * seq_num)
                a[j] = 0
                j = j + m
        m += 1

    b = []
    for i in a:
        if a[i] != 0:
            b.append(a[i])

    del a
    print(b[seq_num - 1])

# O(n * log(n))


def task_2_2(seq_num):
    n = seq_num * 10

    a = [2, 3]

    for i in range(4, n):                          # 10 * seq_num
        k = int(sqrt(i))
        for j in range(2, k + 1):       # sqrt(10 * seq_num)
            if i % j == 0:
                break
            elif j == k:
                a.append(i)
    print(a[seq_num - 1])

# O(n * sqrt(n))


seq_num = int(input('Введите номер простого числа: '))
cProfile.run('task_2_1(seq_num), task_2_2(seq_num)')

# Введите номер простого числа: 6000
# 59359
# 59359
#          72115 function calls in 0.294 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.001    0.001    0.294    0.294 <string>:1(<module>)
#         1    0.215    0.215    0.239    0.239 lesson_4.py:37(task_2_2)
#         1    0.053    0.053    0.054    0.054 lesson_4.py:4(task_2_1)
#         1    0.000    0.000    0.294    0.294 {built-in method builtins.exec}
#         2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
#     59996    0.022    0.000    0.022    0.000 {built-in method math.sqrt}
#     12112    0.003    0.000    0.003    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
